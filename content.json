{"meta":{"title":"前端开发","subtitle":"夏小宝的blog","description":"专注前端开发的夏小宝","author":"夏小宝","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2017-10-21T03:06:21.000Z","updated":"2017-10-21T03:06:21.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaScript的趣味应用","slug":"JavaScript的趣味应用","date":"2017-10-20T13:55:47.000Z","updated":"2017-10-20T13:56:19.000Z","comments":true,"path":"2017/10/20/JavaScript的趣味应用/","link":"","permalink":"http://yoursite.com/2017/10/20/JavaScript的趣味应用/","excerpt":"","text":"0.前言2016年09月05日闲来无事，今天给大家奉上一款用JS做的小游戏–选字游戏。其实这个游戏，在制作的时候，并没有感觉难，但是玩的时候就有点讨厌了，不过感觉还是可以推荐给大家的(我自己做的游戏，开始玩的时候竟然一下子忘了规则了，还以为是自己程序有问题……)。好吧，接下来就是国际惯例，游戏的演示GIF图。选字游戏.gif 1.布局分析Paste_Image.png 这个布局其实还是蛮简单的，相信大家也能很快写出来，直接给大家上代码吧。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;选字游戏&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123; padding: 0; margin: 0; &#125; #wrap&#123; width: 450px; height: 600px; background: #CCC; border-radius: 5px; margin: 20px auto 0px; position: relative; &#125; #shengyuTime&#123; font-size: 30px; position: absolute; left: 20px; top: 20px; &#125; #wancheng&#123; position: absolute; top:20px; right: 20px; font-size: 30px; &#125; #show&#123; position: absolute; height: 100px; top:180px; left: 155px; font-size: 120px; &#125; #introduce&#123; position: absolute; top:350px; left: 20px; width: 390px; /*text-indent: 2em;*/font-size: 30px; &#125; #list&#123; list-style: none; position: absolute; bottom: 20px; &#125; #list li &#123; float: left; font-size: 70px; margin-left: 17px; cursor: pointer; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"wrap\"&gt; &lt;div id=\"shengyuTime\"&gt;剩余时间:20&lt;/div&gt; &lt;div id=\"wancheng\"&gt;完成:0&lt;/div&gt; &lt;div id=\"show\"&gt;红&lt;/div&gt; &lt;div id=\"introduce\"&gt;根据上面的字的颜色从下面选择正确的字，选择正确自动开始&lt;/div&gt; &lt;ul id=\"list\"&gt; &lt;li&gt;红&lt;/li&gt; &lt;li&gt;蓝&lt;/li&gt; &lt;li&gt;绿&lt;/li&gt; &lt;li&gt;黄&lt;/li&gt; &lt;li&gt;黑&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt; 做完是这个效果：CSS布局.png 2.简单的逻辑分析从上面的GIF图能看出来，顶部有两个变换的量，一个是倒计时，一个是完成的次数。这两个很好处理，倒计时可以用一个计时器来搞定，而完成次数通过跟onclick建立一定的关系，也可以很容易的实现。继续往下走，我们可以看到一个大大的黄色的“黑”字，读起来还有点绕口呃。这个位置的文字和颜色是一直随机变化的，怎么处理呢？ok，没错我们可以选择用随机数的方法来实现。再往下是一个固定的用于显示规则的区域，这里我们用一个标签就可以了。最后一块呢，也是一个随机变化的部分，不过这部分的字数和颜色有五个，需要同时变化。当然，我们也将要通过随机数来实现这个效果。3.JS实现好啦，通过刚才简单的分析，我们已经大致的知道每一部分该用什么方法处理了，接下来我们要做的就是用具体的代码来完成每一部分。1.首先获取元素：12345var shengyuDiv = document.getElementById(\"shengyuTime\"); var wanchengDiv = document.getElementById(\"wancheng\");var showDiv = document.getElementById(\"show\"); var listLiArray=document.getElementsByTagName(\"li\"); var colorArray =[\"red\",\"green\",\"blue\",\"yellow\",\"black\"]; var fontArray=[\"红\",\"绿\",\"蓝\",\"黄\",\"黑\"]; 这里大家先思考一下，颜色数组和文字数组需不需要有一一对应的关系吗？一定要先思考噢，后面再给大家解释。show.png 先说明一下，上面的时间和完成次数部分我们先不做处理，我们首先来处理中间这一部分。里面的内容是一个文字和一种颜色，而且这两种都是随机的。我们可以通过随机两组数值，和，来分别控制从colorArray、fontArray中取出随机值，来拼凑到一起。1function RandNum(min,max)&#123; return parseInt(Math.random()*(max-min+1)+min); &#125; 2.先设置一个形参，产生随机数。12345function showFun()&#123; showColorIndex = RandNum(0,4); //随机出来颜色 showFontIndex = RandNum(0,4); //随机出来文字 //区域设置文字颜色 showDiv.style.color=colorArray[showColorIndex]; //区域设置文字 showDiv.innerHTML=fontArray[showFontIndex]; &#125; showFun(); 3.将随机出来的数，作为下标，在colorArray和fontArray里面找到对应的值。通过这种方式我们就能做出来一个随机颜色随机文字的了.随机颜色，随机文字.gif 4.我们接下来要处理底部部分，我们在JS定义的是 这部分需要随机出来两组，每组分别为五个数值得数组。但是这次我们不能用上面的那种方法，有人这里可能会有疑问。ok，假如我们使用同样的方法来产生数组，那么就会出现[0，1，2，1，4]这样，数组内有相同数值的情况，这样我们通过下标去寻找对应值得时候就会出现“红绿蓝绿黑”，有两个绿色或者两个绿字的情况。这样是不可以的，所以我们不能采用这中方法。我们需要的是一组没有重复数值得数组：1234function compare(num)&#123; var arr=[]; while(arr.length&lt;num)&#123; var i = RandNum(0,4); while(arr.indexOf(i)!=-1)&#123; //arr.indexOf(i) 意思是寻找i在arr数组里面的下标，如果有就会返回下标的具体数值；如果没有，就返回-1. i=RandNum(0,4); } arr.push(i); } return arr; } 首先定义一个arr空的数组，第一个while循环用来控制往arr里面放置数字，第二个while循环则是控制产生不重复的数：如果随机产生的i在arr下标不是-1是，就说明arr里面有这个i值，这个i值就不能放进去，而是要继续重复产生数值。当arr的长度&gt;=num时，结束循环，返回值为arr。12345678function listFun()&#123; var listFonts = compare(5); var listColors = compare(5) //为所有的li标签添加对应的文字 for(var i=0;i&lt;listLiArray.length;i++)&#123; listLiArray[i].innerHTML= fontArray[listFonts[i]]; listLiArray[i].style.color= colorArray[listColors[i]]; //自定义属性记录li标签当前显示的文字在fontArray中的下标是多少 listLiArray[i].selectIndex=listFonts[i]; &#125;&#125; listFun(); 调用compare函数，产生随机的两组不重复的数组。并使用一个for循环，来对listLiArray里面的元素进行处理。123listLiArray[i].innerHTML= fontArray[listFonts[i]]; listLiArray[i].style.color= colorArray[listColors[i]]; listLiArray[i].selectIndex=listFonts[i]; 其中，最重要的是这三句代码，可能有的人不太理解。这里我解释一下：记得在开始的时候，我问过大家，颜色数组和文字数组需不需要有联系呢？这个是肯定要有联系的。Why？要知道，游戏规则是看到里面字体的颜色，然后找到下面形容这个颜色的文字，并点击。这里我们选择的方法是：因为在定义颜色和文字数组的时候，存在一一对应关系。所以，当里面的颜色的下标，等于里面我们点击的文字的下标时，我们定义这个叫成功一次。比如说：里面颜色是红色，红色的colorArray下标为0，在里，我们点击了“红”字，“红”字在fontArray里面的下标也为0，所以，当下标相同的时候，我们就可以判定点击是正确的了。通过for循环，我们选出来listFonts[i]作为下标，分别从fontArray中提取出来对应的值。listColors[i]同理。提取出来的值，是要分别赋给listLiArray里面的元素的，所以，我们可以说，listFonts[i]就是listLiArray里面文字的下标。listLiArray[i].innerHTML= fontArray[listFonts[i]];listLiArray[i].style.color= colorArray[listColors[i]]; 所以，这两句是赋值代码。listLiArray[i].selectIndex=listFonts[i]; 这一句是自定义属性，用来记录当前点击的文字下标。让listLiArray[i].selectIndex就等于被点击文字的下标。ok，下标获取到了，我们就开始比较吧。function init(){//给每一个li标签绑定事件 for(var i =0; i&lt;listLiArray.length;i++){ var a = 0;listLiArray[i].onclick = function(){// alert(i);if(this.selectIndex == showColorIndex){//刷新show区域和list区域的内容 showFun();listFun();a++;wanchengDiv.innerHTML=”完成 : “+a; }} }} init(); 首先给listlistLiArray里面的每一个元素，绑定点击事件。判断：如果点击的那个元素，它对应文字的下标等于show区域的颜色下标的时候，刷新（重新调用shouFun和listFun），这时候我们设置一个a，用来表示完成的次数，当if判断条件成立时，我们让a++，同时在里面输出完成的次数：完成：a；倒数第二步.gif 到这里我们这个游戏的规则就已经制作完毕了，只剩下一个显示倒计时的部分，这里我们用一个定时器来搞定它。12345678910function time()&#123; var timer = null;var t=20; timer=setInterval(function()&#123; t--; shengyuDiv.innerHTML=\"剩余时间:&amp;nbsp\"+t; if(t&lt;=0)&#123; clearInterval(timer); alert(\"Time Out\"); &#125; &#125;,1000) &#125; time(); &#125; ok，这样我们完成了一个JS小应用——选字游戏。制作完成以后，赶快去玩两局吧。4.完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;选字游戏&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123; padding: 0; margin: 0; &#125; #wrap&#123; width: 450px; height: 600px; background: #CCC; border-radius: 5px; margin: 20px auto 0px; position: relative; &#125; #shengyuTime&#123; font-size: 30px; position: absolute; left: 20px; top: 20px; &#125; #wancheng&#123; position: absolute; top:20px; right: 20px; font-size: 30px; &#125; #show&#123; position: absolute; height: 100px; top:180px; left: 155px; font-size: 120px; &#125; #introduce&#123; position: absolute; top:350px; left: 20px; width: 390px; /*text-indent: 2em;*/ font-size: 30px; &#125; #list&#123;list-style: none; position: absolute; bottom: 20px; &#125; #list li &#123; float: left; font-size: 70px; margin-left: 17px; cursor: pointer; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"wrap\"&gt; &lt;div id=\"shengyuTime\"&gt;剩余时间:20&lt;/div&gt; &lt;div id=\"wancheng\"&gt;完成:0&lt;/div&gt; &lt;div id=\"show\"&gt;红&lt;/div&gt; &lt;div id=\"introduce\"&gt;根据上面的字的颜色从下面选择正确的字，选择正确自动开始&lt;/div&gt; &lt;ul id=\"list\"&gt; &lt;li&gt;红&lt;/li&gt; &lt;li&gt;蓝&lt;/li&gt; &lt;li&gt;绿&lt;/li&gt; &lt;li&gt;黄&lt;/li&gt; &lt;li&gt;黑&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt; &lt;script type=\"text/javascript\"&gt; function game()&#123; //获取必要标签 var shengyuDiv = document.getElementById(\"shengyuTime\"); var wanchengDiv = document.getElementById(\"wancheng\"); var showDiv = document.getElementById(\"show\"); var listLiArray=document.getElementsByTagName(\"li\"); var colorArray =[\"red\",\"green\",\"blue\",\"yellow\",\"black\"]; var fontArray=[\"红\",\"绿\",\"蓝\",\"黄\",\"黑\"]; //随机改变show这块区域的文字和颜色 //功能函数：实现随机min-max之间的随机整数 function RandNum(min,max)&#123;//形式参数（形参） return parseInt(Math.random()*(max-min+1)+min); &#125; //处理show这块区域的一个函数 function showFun()&#123; showColorIndex = RandNum(0,4); //随机出来颜色 showFontIndex = RandNum(0,4); //随机出来文字 //区域设置文字颜色 showDiv.style.color=colorArray[showColorIndex]; //区域设置文字 showDiv.innerHTML=fontArray[showFontIndex]; &#125; showFun(); function compare(num)&#123; var arr=[]; while(arr.length&lt;num)&#123; var i = RandNum(0,4); while(arr.indexOf(i)!=-1)&#123; i=RandNum(0,4); &#125; arr.push(i); &#125; return arr; &#125;//处理list区域的函数 function listFun()&#123; var listFonts = compare(5); var listColors = compare(5) //为所有的li标签添加对应的文字 for(var i=0;i&lt;listLiArray.length;i++)&#123; listLiArray[i].innerHTML= fontArray[listFonts[i]]; listLiArray[i].style.color= colorArray[listColors[i]]; //自定义属性记录li标签当前显示的文字在fontArray中的下标是多少*** listLiArray[i].selectIndex=listFonts[i]; &#125;&#125; listFun();//初始化函数function init()&#123; //给每一个li标签绑定事件 for(var i =0; i&lt;listLiArray.length;i++)&#123; var a = 0; listLiArray[i].onclick = function()&#123;// alert(i); if(this.selectIndex == showColorIndex)&#123; //刷新show区域和list区域的内容 showFun(); listFun(); a++; wanchengDiv.innerHTML=\"完成 : \"+a; &#125; &#125; &#125;&#125; init(); function time()&#123; var timer = null;var t=20; timer=setInterval(function()&#123; t--; shengyuDiv.innerHTML=\"剩余时间:&amp;nbsp\"+t; console.log(t); if(t&lt;=0)&#123; clearInterval(timer); alert(\"Time Out\"); &#125; &#125;,1000) &#125; time(); &#125; game(); &lt;/script&gt;&lt;/html&gt;","categories":[],"tags":[]},{"title":"弹性盒子","slug":"弹性盒子","date":"2017-10-20T13:52:33.000Z","updated":"2017-10-20T13:53:26.000Z","comments":true,"path":"2017/10/20/弹性盒子/","link":"","permalink":"http://yoursite.com/2017/10/20/弹性盒子/","excerpt":"","text":"布局的传统解决方案，基于盒装模型，依赖display属性 +position属性+float属性。 一、flex 布局 1.flex布局是什么？ flex是flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性。 a.任意一个容器都可以指定为flex布局。 123.box&#123;display:flex;&#125; b.行内元素也可以使用flex布局123.box&#123;display:inline-flex;&#125; c.Webkit内核的浏览器，必须加上-webkit前缀。 123.box&#123;display：-webkit-flex; /*safari*/ display:flex;&#125; 注意：设为Flex布局以后，子元素的float，clear和vertical-align属性将失败。 二、基本概念 2.采用Flex布局的元素，称为Flex容器，简称“容器”。它的所有元素自动成为 容器成员，称为Flex项目，简称“项目”。 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start ，结束位置叫做 cross end。项目默认沿主轴排列，单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 三、容器的属性 以下六个属性设置在容器上 flex-direction justify-content flex-wrap align-items flex-flow align-content 3.1flex-dirction属性 flex-direction属性决定主轴的方向（即项目的排列方向）。123.box&#123;flex-direction：row | row-reverse | column | column-revers;&#125; 它可能有四个值: row(默认值)：主轴为水平方向，起点在左端。 row-reverse:主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse:主轴为垂直方向，起点在下沿。 3.2flex-wrap属性 默认情况下，项目都排在一条线（又称“轴线”）上。flex-wrap属性定义，如果一跳轴线排不下，如果换行。 123.box&#123;flex-wrap:nowrap | wrap | wrap-reverse;&#125; 可以 能去三个值。 （1）nowrap（默认）：不换行。 (2)wrap:换行，第一行在上方 (3)wrap-reverse:换行第一行在下方。 3.3flex-flowflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。123.box&#123;flex-flow:&lt;flex-direction&gt; | | &lt;flex-wrap&gt;;&#125; 3.4justify-content属性 justify-content属性定义了项目在主轴上的对齐方式。 123.box&#123;justify-content:flex-start | flex-end | center | space-between | space-around;&#125; 它可能取5个值，具体对齐方式与轴的方向有关。下面假设轴为从左到右。 flex-start（默认值）：左对齐 flex-end：右对齐 center：居中 space-between:两端对齐，项目之间的间隔都相等。 space-around:每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 3.5align-items属性 align-items属性定义项目在交叉轴上如何对齐。123.box&#123;align-items:flex-start | flex-end | center | baseeline | stretch;&#125; 它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。 flex-start:交叉轴的起点对齐。 flex-end:交叉轴的终点对齐。 center：交叉轴的中点对齐。 baseline：项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 3.6align-content属性 align-content属性定义了多跟轴线的对齐方式，如果项目只有一根轴线，该属性不起作用。123.box&#123;align-content:flex-start | flex-end | center | space-between | space-around | stretch；&#125; 该属性可能取6个值： flex-start:与交叉轴的起点对齐。 flex-end:与交叉轴的终点对齐。 center：与交叉轴的中点对齐。 space-between：与交叉轴的两端对齐，轴线之间的建个平均分布。 space-around:每根轴线两侧的间隔都相等，所以轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴。 四、项目的属性 以下6个属性设置在项目上。 order flex-grow flex-shrink flex align-self###4.1order属性 order属性定义项目的排列顺序，数值越小，排列越靠前，默认为0。123.item&#123;order：&lt;integer&gt;;&#125; 4.2flex-grow属性 flew-grow属性定义项目上午放大比例，默认为0，即如果曾在剩余空间，也不放大。123.item&#123;flex-grow:&lt;number&gt;; /*default 0 */&#125; 如果所有项目的flex-grow属性都为1，则他们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其它项目都为1，则前者占据的剩余空间将比其他项多一倍。4.3flex-shrink属性 flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。123.item&#123;flex-shrink: &lt;number&gt;; /* default 1 */&#125; 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比列缩小，如果一个项目的flex-shrink属性为0，其它项目都为1，则空间不足时，前者不缩小。负值对该属性无效。 4.4flex-basis 属性 flex-basis属性定义了在分配多余空间之前，项目占据的猪轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。123.item&#123;flex-basis:&lt;length&gt; | auto； /*default auto*/&#125; 他可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 4.5flex属性 flex属性是flex-grow,flex-shrink和flex-basisde简写，默认值为 0 1 auto.hou两个属性可选。123.item&#123;flex：none | [&lt;&apos;flex-grow&apos;&gt;&lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt;]&#125; 该属性有两个快捷值：auto（1 1 auto ）和none（0 0 auto）。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会腿酸关值。4.6align-self属性 align-self属性允许单个项目有与其他项目不一样的对齐方式，可以覆盖align-items属性，默认值为auto，表示继承腹肌元素的align-items属性，如果没有父元素，则等同于stretch。123.item&#123;align-self:auto | flex-start | flex-end | center | baseline | stretch；&#125; 该属性可能取6个值，出了auto，其他都与align-items 属性完全一致。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-10-20T12:56:29.000Z","updated":"2017-10-20T14:01:37.000Z","comments":true,"path":"2017/10/20/hello-world/","link":"","permalink":"http://yoursite.com/2017/10/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}